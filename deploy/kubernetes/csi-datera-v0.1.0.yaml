# Datera CSI Driver Deployment Yaml
#
# Documentation on how to write this insanity:
# https://github.com/kubernetes/community/blob/master/contributors/design-proposals/storage/container-storage-interface.md#recommended-mechanism-for-deploying-csi-drivers-on-kubernetes
#
# Pieces
# ------
# * csi-provisioner
#   . provisioner service account
#   . provisioner cluster role
#   . provisioner cluster role binding
#   . provisioner service
#   . provisioner statefulset
# * csi-snapshotter (probably gonna be included with csi-provisioner)
#   . snapshotter service account
#   . snapshotter cluster role
#   . snapshotter cluster role binding
#   . snapshotter service
#   . snapshotter statefulset
# * driver-registrar
#   . driver-registrar service account
#   . driver-registrar cluster role
#   . driver-registrar cluster role binding
#   . driver-registrar service?
#   . driver-registrar daemonset
# * datera-plugin (controller)
# * datera-plugin (node/identity)
# * datera storage class


---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: dat-block-storage
  namespace: kube-system
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: io.datera.csi.dsp
parameters:
  replicas: 1

###### Controller ######
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-provisioner
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-provisioner
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["list", "watch", "create", "update", "delete", "get"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["create", "get", "list", "watch", "update", "delete"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "list", "watch", "delete"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-provisioner
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: csi-provisioner
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-provisioner
  apiGroup: rbac.authorization.k8s.io
---
# needed for StatefulSet
kind: Service
apiVersion: v1
metadata:
  name: csi-provisioner
  namespace: kube-system
  labels:
    app: csi-provisioner
spec:
  selector:
    app: csi-provisioner
  ports:
    - name: dummy
      port: 12345
---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: csi-provisioner
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: csi-provisioner
  serviceName: "csi-provisioner"
  replicas: 1
  template:
    metadata:
      labels:
        app: csi-provisioner
    spec:
      serviceAccount: csi-provisioner
      containers:
        - name: csi-provisioner
          image: quay.io/k8scsi/csi-provisioner:v0.4.0
          args:
            - "--provisioner=io.datera.csi.dsp"
            - "--csi-address=$(DAT_SOCKET)"
            - "--v=5"
          env:
            - name: DAT_SOCKET
              value: unix:///var/lib/csi/io.daterainc.csi.dsp/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/
        - name: csi-snapshotter
          image: quay.io/k8scsi/csi-snapshotter:v0.4.0
          args:
            - "--csi-address=$(DAT_SOCKET)"
            - "--v=5"
          env:
            - name: DAT_SOCKET
              #value: unix:///var/lib/csi/io.daterainc.csi.dsp/csi.sock
              value: /var/lib/csi/io.daterainc.csi.dsp/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/
        - name: dat-csi-plugin-controller
          image: dateraiodev/dat-csi-plugin:v0.1.0
          env:
            - name: DAT_TYPE
              value: conident
            - name: DAT_SOCKET
              value: unix:///var/lib/csi/io.daterainc.csi.dsp/csi.sock
            - name: DAT_MGMT
              value: 172.19.1.41
            - name: DAT_USER
              value: admin
            - name: DAT_PASS
              value: pass
            - name: DAT_TENANT
              value: /root
            - name: DAT_API
              value: "2.2"
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/
      volumes:
        - name: socket-dir
          emptyDir: {}

###### NODE/IDENTITY ######
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-node
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-node
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "update"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-node
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: csi-node
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-node
  apiGroup: rbac.authorization.k8s.io

---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: csi-node
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: csi-node
  template:
    metadata:
      labels:
        app: csi-node
    spec:
      serviceAccount: csi-node
      hostNetwork: true
      containers:
        - name: driver-registrar
          image: quay.io/k8scsi/driver-registrar:v0.3.0
          args:
            - "--v=5"
            - "--csi-address=$(DAT_SOCKET)"
            - "--kubelet-registration-path="
          env:
            - name: DAT_SOCKET
              #value: unix:///var/lib/csi/io.daterainc.csi.dsp/csi.sock
              value: /var/lib/csi/io.daterainc.csi.dsp/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi
        - name: dat-csi-plugin-node
          image: dateraiodev/dat-csi-plugin:v0.1.0
          env:
            - name: DAT_TYPE
              value: nodeident
            - name: DAT_SOCKET
              value: unix:///var/lib/csi/io.daterainc.csi.dsp/csi.sock
            - name: DAT_MGMT
              value: 172.19.1.41
            - name: DAT_USER
              value: admin
            - name: DAT_PASS
              value: pass
            - name: DAT_TENANT
              value: /root
            - name: DAT_API
              value: "2.2"
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: "/var/lib/csi"
            - name: mounts
              mountPath: "/mnt"
            - name: etc-iscsi
              mountPath: "/etc/iscsi"
      volumes:
        - name: socket-dir
          emptyDir: {}
        - name: mounts
          hostPath:
            path: "/mnt"
        - name: etc-iscsi
          hostPath:
            path: "/etc/iscsi"
        - name: devices
          hostPath:
            path: "/dev"
