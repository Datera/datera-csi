# #################################
# StorageClass Supported Parameters
# #################################
# Name                 Default
# -------------        ------------
# replica_count        3
# placement_mode       hybrid
# ip_pool              default
# template             ""
# round_robin          false
# read_iops_max        0
# write_iops_max       0
# total_iops_max       0
# read_bandwidth_max   0
# write_bandwidth_max  0
# total_bandwidth_max  0
# iops_per_gb          0
# bandwidth_per_gb     0
# fs_type              ext4
# fs_args              -E lazy_itable_init=0,lazy_journal_init=0,nodiscard -F
# delete_on_unmount    false
#
#
# Currently datera UDC environment variables are used to initialize the driver
# (This may change in the future)
#
# DAT_MGMT
# DAT_USER
# DAT_PASS
# DAT_TENANT
# DAT_API
#
# These need to be set for both the controller StatefulSet and node DaemonSet

---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: dat-block-storage
  namespace: kube-system
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: dsp.csi.daterainc.io
parameters:
  replica_count: "1"
allowVolumeExpansion: true
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: csi-datera-controller-sa
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-datera-provisioner-role
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-datera-provisioner-binding
subjects:
  - kind: ServiceAccount
    name: csi-datera-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-datera-provisioner-role
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-datera-attacher-role
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-datera-attacher-binding
subjects:
  - kind: ServiceAccount
    name: csi-datera-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-datera-attacher-role
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-datera-snapshotter-role
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["create", "get", "list", "watch", "update", "delete"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "list", "watch", "delete"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-datera-snapshotter-binding
subjects:
  - kind: ServiceAccount
    name: csi-datera-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-datera-snapshotter-role
  apiGroup: rbac.authorization.k8s.io
---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: csi-provisioner
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: csi-provisioner
  serviceName: "csi-provisioner"
  replicas: 1
  template:
    metadata:
      labels:
        app: csi-provisioner
    spec:
      serviceAccount: csi-datera-controller-sa
      hostNetwork: true
      containers:
        - name: csi-provisioner
          imagePullPolicy: Always
          image: quay.io/k8scsi/csi-provisioner:v1.0.1
          args:
            - "--provisioner=dsp.csi.daterainc.io"
            - "--csi-address=$(DAT_SOCKET)"
            - "--v=5"
          env:
            - name: DAT_SOCKET
              value: /csi/controller.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /csi/
        - name: csi-attacher
          imagePullPolicy: Always
          image: quay.io/k8scsi/csi-attacher:v1.0.0
          args:
            - "--csi-address=$(DAT_SOCKET)"
            - "--v=5"
          env:
            - name: DAT_SOCKET
              value: /csi/controller.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /csi/
        - name: csi-resizer
          imagePullPolicy: Always
          image: quay.io/k8scsi/csi-resizer:v0.2.0
          args:
            - "--csi-address=$(DAT_SOCKET)"
            - "--v=5"
          env:
            - name: DAT_SOCKET
              value: /csi/controller.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /csi/
        - name: csi-snapshotter
          imagePullPolicy: Always
          image: quay.io/k8scsi/csi-snapshotter:v1.0.1
          args:
            - "--csi-address=$(DAT_SOCKET)"
            - "--v=5"
          env:
            - name: DAT_SOCKET
              value: /csi/controller.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /csi/
        - name: dat-csi-plugin-controller
          imagePullPolicy: Always
          image: dateraiodev/dat-csi-plugin:v1.0.8
          command: [ "/bin/sh", "-c", "/bin/dat-csi-plugin 2>&1 | tee /var/log/driver.log" ]
          env:
            - name: DAT_TYPE
              value: conident
            - name: DAT_DRIVER_NAME
              value: dsp.csi.daterainc.io
            - name: DAT_MGMT
              value: 172.19.2.53
            - name: DAT_USER
              value: admin
            - name: DAT_PASS
              value: password
            - name: DAT_TENANT
              value: /root/test_tenant
            - name: DAT_API
              value: "2.2"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/kubelet/plugins/dsp.csi.daterainc.io/
          ports:
          - containerPort: 9808
            name: healthz
            protocol: TCP
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: healthz
            initialDelaySeconds: 10
            timeoutSeconds: 5
            periodSeconds: 10
        - name: liveness-probe
          imagePullPolicy: Always
          volumeMounts:
          - name: socket-dir
            mountPath: /csi
          image: quay.io/k8scsi/livenessprobe:v1.1.0
          args:
          - --csi-address=$(DAT_SOCKET)
          env:
            - name: DAT_SOCKET
              value: /csi/controller.sock
      volumes:
        - name: socket-dir
          hostPath:
            path: /var/lib/kubelet/plugins/dsp.csi.daterainc.io/
            type: DirectoryOrCreate
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-datera-node-sa
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-datera-node-driver-registrar-role
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-datera-node-driver-registrar-binding
subjects:
  - kind: ServiceAccount
    name: csi-datera-node-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-datera-node-driver-registrar-role
  apiGroup: rbac.authorization.k8s.io
---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: csi-node
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: csi-node
  template:
    metadata:
      labels:
        app: csi-node
    spec:
      serviceAccount: csi-datera-node-sa
      hostNetwork: true
      containers:
        - name: node-driver-registrar
          imagePullPolicy: Always
          image: quay.io/k8scsi/csi-node-driver-registrar:v1.0.2
          args:
            - "--v=5"
            - "--csi-address=$(DAT_SOCKET)"
            - "--kubelet-registration-path=$(REG_SOCKET)"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /registration/dsp.csi.daterainc.io /registration/dsp.csi.daterainc.io-reg.sock"]
          env:
            - name: DAT_SOCKET
              value: /csi/node.sock
            - name: REG_SOCKET
              value: /var/lib/kubelet/plugins/dsp.csi.daterainc.io/node.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: socket-dir
              mountPath: /csi/
            - name: registration-dir
              mountPath: /registration/
        - name: dat-csi-plugin-node
          imagePullPolicy: Always
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          image: dateraiodev/dat-csi-plugin:v1.0.8
          # The sleep is to allow the iscsid sidecar to start Running iscsiadm
          # -m session initializes /etc/iscsi/initiatorname.iscsi in this
          # container
          command: [ "/bin/sh", "-c", "sleep 2; iscsiadm -m session; /bin/dat-csi-plugin 2>&1 | tee /var/log/driver.log" ]
          env:
            - name: DAT_TYPE
              value: nodeident
            - name: DAT_DRIVER_NAME
              value: dsp.csi.daterainc.io
            - name: DAT_MGMT
              value: 172.19.2.53
            - name: DAT_USER
              value: admin
            - name: DAT_PASS
              value: password
            - name: DAT_TENANT
              value: /root/test_tenant
            - name: DAT_API
              value: "2.2"
          volumeMounts:
            - name: socket-dir
              mountPath: /csi/
            - name: devices
              mountPath: /dev
            - name: iscsi-socket
              mountPath: /iscsi-socket/iscsi.sock
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet
              mountPropagation: "Bidirectional"
          ports:
          - containerPort: 9809
            name: healthz
            protocol: TCP
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: healthz
            initialDelaySeconds: 10
            timeoutSeconds: 5
            periodSeconds: 10
        - name: liveness-probe
          imagePullPolicy: Always
          volumeMounts:
          - name: socket-dir
            mountPath: /csi
          image: quay.io/k8scsi/livenessprobe:v1.1.0
          args:
          - --csi-address=$(DAT_SOCKET)
          - --health-port=9809
          env:
            - name: DAT_SOCKET
              value: /csi/node.sock
      volumes:
        - name: socket-dir
          hostPath:
            path: /var/lib/kubelet/plugins/dsp.csi.daterainc.io/
            type: DirectoryOrCreate
        - name: iscsi-socket
          hostPath:
            path: /var/datera/csi-iscsi.sock
            type: FileOrCreate
        - name: devices
          hostPath:
            path: /dev
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet
            type: Directory
