# Datera CSI Driver Deployment Yaml
#
# Documentation on how to write this insanity:
# https://github.com/kubernetes/community/blob/master/contributors/design-proposals/storage/container-storage-interface.md#recommended-mechanism-for-deploying-csi-drivers-on-kubernetes
#
# Pieces
# ------
# * datera storage class
# CONTROLLER
# * csi-provisioner
#   . provisioner service account
#   . provisioner cluster role
#   . provisioner cluster role binding
#   . provisioner service
#   . provisioner statefulset
# * csi-attacher
# * csi-snapshotter
# * datera-plugin (controller)
# NODE
# * driver-registrar
#   . driver-registrar service account
#   . driver-registrar cluster role
#   . driver-registrar cluster role binding
#   . driver-registrar service?
#   . driver-registrar daemonset
# * iscsid
# * datera-plugin (node/identity)
#
#
# #################################
# StorageClass Supported Parameters
# #################################
# Name                 Default
# -------------        ------------
# replica_count        3
# placement_mode       hybrid
# ip_pool              default
# template             ""
# round_robin          false
# read_iops_max        0
# write_iops_max       0
# total_iops_max       0
# read_bandwidth_max   0
# write_bandwidth_max  0
# total_bandwidth_max  0
# iops_per_gb          0
# bandwidth_per_gb     0
# fs_type              ext4
# fs_args              -E lazy_itable_init=0,lazy_journal_init=0,nodiscard -F
# delete_on_unmount    false
#
#
# Currently datera UDC environment variables are used to initialize the driver
# (This may change in the future)
#
# DAT_MGMT
# DAT_USER
# DAT_PASS
# DAT_TENANT
# DAT_API
#
# These need to be set for both the controller StatefulSet and node DaemonSet


---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: dat-block-storage
  namespace: kube-system
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: io.datera.csi.dsp
parameters:
  replica_count: "3"

###### Controller ######
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-provisioner
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-provisioner
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["list", "watch", "create", "update", "delete", "get"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["create", "get", "list", "watch", "update", "delete"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "list", "watch", "delete"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-provisioner
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: csi-provisioner
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-provisioner
  apiGroup: rbac.authorization.k8s.io
---
# needed for StatefulSet
kind: Service
apiVersion: v1
metadata:
  name: csi-provisioner
  namespace: kube-system
  labels:
    app: csi-provisioner
spec:
  selector:
    app: csi-provisioner
  ports:
    - name: dummy
      port: 12345
---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: csi-provisioner
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: csi-provisioner
  serviceName: "csi-provisioner"
  replicas: 1
  template:
    metadata:
      labels:
        app: csi-provisioner
    spec:
      serviceAccount: csi-provisioner
      hostNetwork: true
      containers:
        - name: csi-provisioner
          image: quay.io/k8scsi/csi-provisioner:v0.4.0
          args:
            - "--provisioner=io.datera.csi.dsp"
            - "--csi-address=$(DAT_SOCKET)"
            - "--v=5"
          env:
            - name: DAT_SOCKET
              value: unix:///var/lib/csi/io.daterainc.csi.dsp/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/
        - name: csi-attacher
          image: quay.io/k8scsi/csi-attacher:v0.4.0
          args:
            - "--csi-address=$(DAT_SOCKET)"
            - "--v=5"
          env:
            - name: DAT_SOCKET
              # value: unix:///var/lib/csi/io.daterainc.csi.dsp/csi.sock
              value: /var/lib/csi/io.daterainc.csi.dsp/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/
        - name: csi-snapshotter
          image: quay.io/k8scsi/csi-snapshotter:v0.4.1
          args:
            - "--csi-address=$(DAT_SOCKET)"
            - "--v=5"
          env:
            - name: DAT_SOCKET
              #value: unix:///var/lib/csi/io.daterainc.csi.dsp/csi.sock
              value: /var/lib/csi/io.daterainc.csi.dsp/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/
        - name: dat-csi-plugin-controller
          image: dateraiodev/dat-csi-plugin:latest
          command: [ "/bin/sh", "-c", "/bin/dat-csi-plugin 2>&1 | tee /var/log/driver.log" ]
          env:
            - name: DAT_TYPE
              value: conident
            - name: DAT_SOCKET
              value: unix:///var/lib/csi/io.daterainc.csi.dsp/csi.sock
            - name: DAT_MGMT
              value: 1.1.1.1
            - name: DAT_USER
              value: admin
            - name: DAT_PASS
              value: password
            - name: DAT_TENANT
              value: /root
            - name: DAT_API
              value: "2.2"
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/
      volumes:
        - name: socket-dir
          emptyDir: {}

###### NODE/IDENTITY ######
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-node
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-node
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "update"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-node
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: csi-node
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-node
  apiGroup: rbac.authorization.k8s.io

---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: csi-node
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: csi-node
  template:
    metadata:
      labels:
        app: csi-node
    spec:
      serviceAccount: csi-node
      hostNetwork: true
      containers:
        - name: driver-registrar
          image: quay.io/k8scsi/driver-registrar:v0.4.1
          args:
            - "--v=5"
            - "--csi-address=$(DAT_SOCKET)"
            - "--kubelet-registration-path=$(REG_SOCKET)"
          env:
            - name: DAT_SOCKET
              #value: unix:///var/lib/csi/io.daterainc.csi.dsp/csi.sock
              value: /csi/csi.sock
            - name: REG_SOCKET
              value: /var/lib/kubelet/plugins/io.daterainc.csi.dsp/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: registration-dir
              mountPath: /registration
        - name: iscsid
          imagePullPolicy: Always
          image: dateraiodev/iscsi:latest
          command: [ "/bin/bash", "-c", "iscsi-recv &2>1 & iscsid-run.sh" ]
          securityContext:
            privileged: true
          volumeMounts:
            - name: devices
              mountPath: /dev
            - name: iscsi-socket
              mountPath: /iscsi-socket
            - name: libmod
              mountPath: /lib/modules
        - name: dat-csi-plugin-node
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          image: dateraiodev/dat-csi-plugin:latest
          # The sleep is to allow the iscsid sidecar to start Running iscsiadm
          # -m session initializes /etc/iscsi/initiatorname.iscsi in this
          # container
          command: [ "/bin/sh", "-c", "sleep 2; iscsiadm -m session; /bin/dat-csi-plugin 2>&1 | tee /var/log/driver.log" ]
          env:
            - name: DAT_TYPE
              value: nodeident
            - name: DAT_SOCKET
              value: unix:///csi/csi.sock
            - name: DAT_MGMT
              value: 1.1.1.1
            - name: DAT_USER
              value: admin
            - name: DAT_PASS
              value: password
            - name: DAT_TENANT
              value: /root
            - name: DAT_API
              value: "2.2"
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: kubelet-plugins-k
              mountPath: /var/lib/kubelet/plugins/kubernetes.io
              mountPropagation: Bidirectional
            - name: kubelet-pod
              mountPath: /var/lib/kubelet/pods
              mountPropagation: Bidirectional
            - name: devices
              mountPath: /dev
            - name: iscsi-socket
              mountPath: /iscsi-socket
      volumes:
        - name: socket-dir
          hostPath:
            path: /var/lib/kubelet/plugins/io.daterainc.csi.dsp
            type: DirectoryOrCreate
        - name: kubelet-plugins-k
          hostPath:
            path: /var/lib/kubelet/plugins/kubernetes.io
        - name: kubelet-pod
          hostPath:
            path: /var/lib/kubelet/pods
        - name: iscsi-socket
          emptyDir: {}
        - name: devices
          hostPath:
            path: /dev
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins/
        - name: libmod
          hostPath:
            path: /lib/modules
